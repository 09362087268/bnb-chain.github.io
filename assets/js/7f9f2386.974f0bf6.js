"use strict";(self.webpackChunkbeta_BNB_Docs=self.webpackChunkbeta_BNB_Docs||[]).push([[6899],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>m});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),c=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},d=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,b=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return a?t.createElement(b,o(o({ref:n},d),{},{components:a})):t.createElement(b,o({ref:n},d))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},51456:(e,n,a)=>{a.r(n),a.d(n,{frontMatter:()=>i,contentTitle:()=>o,metadata:()=>l,toc:()=>s,default:()=>d});var t=a(87462),r=(a(67294),a(3905));const i={sidebar_label:"Create Validator",sidebar_position:2,hide_table_of_contents:!1},o="Create Validator",l={unversionedId:"beaconchain/validator/create-val",id:"beaconchain/validator/create-val",isDocsHomePage:!1,title:"Create Validator",description:"Requirements and Responsibility",source:"@site/docs/beaconchain/validator/create-val.md",sourceDirName:"beaconchain/validator",slug:"/beaconchain/validator/create-val",permalink:"/docs/beaconchain/validator/create-val",editUrl:"https://github.com/bnb-chain/bnb-chain.github.io/blob/master/docs/beaconchain/validator/create-val.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Create Validator",sidebar_position:2,hide_table_of_contents:!1},sidebar:"bscSideBar",previous:{title:"Overview",permalink:"/docs/beaconchain/validator/overview"},next:{title:"Run Validator",permalink:"/docs/beaconchain/validator/run-val"}},s=[{value:"Requirements and Responsibility",id:"requirements-and-responsibility",children:[],level:2},{value:"Become a Validator Candidate",id:"become-a-validator-candidate",children:[{value:"Step1: Generate Consensus Key",id:"step1-generate-consensus-key",children:[],level:3},{value:"Step2: Send Create Validator Transaction",id:"step2-send-create-validator-transaction",children:[],level:3}],level:2}],c={toc:s};function d(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-validator"},"Create Validator"),(0,r.kt)("h2",{id:"requirements-and-responsibility"},"Requirements and Responsibility"),(0,r.kt)("p",null,"To become a validator, you'll need to"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Send a create-validator-open transaction to declare the candidacy. The minimal self-delegation asset amount is 10000 BNB."),(0,r.kt)("li",{parentName:"ol"},"Make users delegate on your validator. All the validators will be ranked by their accumulated BNB stake amount.\nThere is an on-chain parameter ",(0,r.kt)("inlineCode",{parentName:"li"},"MaxValidators"),". Only the validator candidates whose rank meets the requirement can be elected."),(0,r.kt)("li",{parentName:"ol"},"Run a full node to help produce blocks on BC.")),(0,r.kt)("h2",{id:"become-a-validator-candidate"},"Become a Validator Candidate"),(0,r.kt)("p",null,"You will need ",(0,r.kt)("a",{parentName:"p",href:"/docs/beaconchain/develop/api-reference/cli"},"Beacon Chain CLI")," for the commands."),(0,r.kt)("h3",{id:"step1-generate-consensus-key"},"Step1: Generate Consensus Key"),(0,r.kt)("p",null,"Use the command below to generate a consensus key. It will be used in the full node to sign the consensus message if the validator gets bonded."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ bnbcli utils gen-consensus-key\nThe consensus key has been generated and saved to ./priv_validator_key.json successfully\nThe consensus pubkey is bcap1zcjduepqg6glk780f4ynvjjk82drnycty7zjl0uz79a6h2depnhavshvg39sm0c5tl\n")),(0,r.kt)("h3",{id:"step2-send-create-validator-transaction"},"Step2: Send Create Validator Transaction"),(0,r.kt)("p",null,"Create or recover an account, make sure the account gets more than 10000 BNB."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ bnbcli keys add your_key_name\n\n$ bnbcli keys add your_key_name --recover\n")),(0,r.kt)("p",null,"Send create-validator-open transaction to declare the candidacy."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# Command for create validator on mainnet  \n$ bnbcli staking create-validator-open \\  \n--address-delegator {wallet address on BC} \\\n--amount 10000000000:BNB \\  \n--pubkey {the concensus pubkey created in step 1} \\\n--commission-rate {10000000 represent 10%} \\  \n--commission-max-rate {20000000 represent 20%} \\  \n--commission-max-change-rate {500000000 represent 5%} \\  \n--moniker {validator name} \\\n--details {validator detailed description} \\  \n--identity {keybase identity} \\  \n--website {website for validator} \\  \n--from {key name} \\  \n--chain-id Binance-Chain-Tigris \\  \n--node https://dataseed5.defibit.io:443  \n\n# Query validators\n./bnbcli staking  validators --chain-id Binance-Chain-Tigris    --node https://dataseed5.defibit.io:443\n  \n# Command for create validator on testnet  \n$ tbnbcli staking create-validator-open \\  \n--address-delegator {wallet address on BC} \\  \n--amount 10000000000:BNB \\\n--pubkey {the concensus pubkey created in step 1} \\\n--commission-rate {10000000 represent 10%} \\  \n--commission-max-rate {20000000 represent 20%} \\  \n--commission-max-change-rate {10000000 represent 1%} \\  \n--moniker {validator name} \\  \n--details {validator detailed description} \\  \n--identity {keybase identity} \\  \n--website {website for validator} \\  \n--from {key name} \\  \n--chain-id Binance-Chain-Ganges \\  \n--node=http://data-seed-pre-2-s1.binance.org:80\n\n## Query validators on testnet\n./tbnbcli staking  validators  --chain-id Binance-Chain-Ganges  --node=http://data-seed-pre-2-s1.binance.org:80\n")))}d.isMDXComponent=!0}}]);